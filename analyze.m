%% analyze.m - Automatic STI Analysis Script
%
% NOTE: This script will NOT run properly unless you download (or adapt) the
%       “control_measurements” folder from:
%           https://github.com/Cieslar-Simon/STI
%       and place it alongside this script. Additionally, the “test_signals”
%       folder is required, but can be generated by running
%           STI_Generate_test_signals.m
%
% -------------------------------------------------------------------------
% Description:
%   This MATLAB script automates the computation of Speech Transmission Index (STI)
%   using several methods (Full STI, STIPA, Indirect Method, and REW impulse response).
%   It processes measurements for different positions, compares results with and without
%   external reference signals, and summarizes outputs in tables.
%
% Usage:
%   1. Ensure all required WAV files and reference signals are placed in the
%      appropriate folders:
%        - control_measurements/Position 1/
%        - control_measurements/Position 2/
%        - test_signals/
%   2. Run this script in MATLAB. Results will appear in the Command Window.
%
% Requirements:
%   - MATLAB Signal Processing Toolbox
%   - Custom functions: fullsti, stipa, STI_IR
%   - Room EQ Wizard impulse response WAV files
% -------------------------------------------------------------------------
clear; close all;

% Add paths to control measurements and test signals
addpath('control_measurements\Position 1\')
addpath('control_measurements\Position 2\')
addpath('test_signals\')

%% Ambient Noise Levels
% Measured ambient noise levels (dB SPL) for Position 1 and Position 2 at octave bands
Lnk_pos_1 = [11.7, 12.6, 15.2, 17.6, 19.6, 20.4, 19.8]; % Position 1
Lnk_pos_2 = [09.0, 07.9, 12.6, 16.5, 19.5, 20.4, 19.4]; % Position 2

%% FULL STI Batch Processing (Positions 1 & 2)

% Load the external reference signal
refFilename = 'Full_STI_Signal_12s_1s.wav';
[refSig, refFs] = audioread(refFilename);

% List of measurement positions
positions = [1, 2]; 

% Dynamically build the list of filenames
fullFiles = arrayfun( ...
    @(p) sprintf('Full_STI_Signal_12s_1s_P%d.wav', p), ...
    positions, 'UniformOutput', false);

% Preallocate result vectors
nFiles       = numel(fullFiles);
stiNoRefVal  = zeros(nFiles,1);
stiWithRefVal= zeros(nFiles,1);

% Loop over each position’s file
for i = 1:nFiles
    fname = fullFiles{i};
    [sig, fs] = audioread(fname);

    % FULL STI without external reference
    stiNoRefVal(i) = fullsti( ...
        sig, fs, ...
        'SignalStart',      0, ...
        'SegmentDuration', 12, ...
        'SilenceDuration',  1, ...
        'doTable',          0, ...
        'doPlot',           0);

    % FULL STI with external reference
    stiWithRefVal(i) = fullsti( ...
        sig, fs, ...
        refSig, refFs, ...
        'SignalStart',      0, ...
        'SegmentDuration', 12, ...
        'SilenceDuration',  1, ...
        'doTable',          0, ...
        'doPlot',           0);
end

% Build a MATLAB table summarizing everything
T_fullSTI = table( ...
    fullFiles(:), ...
    stiNoRefVal, ...
    stiWithRefVal, ...
    'VariableNames', {'File','STI_without_ref','STI_with_ref'} ...
);

% Display the results
disp(T_fullSTI)

%% STIPA Batch Processing (Positions 1 & 2)
% Processes STIPA measurements for multiple files per position

% Load the reference signal once
refFilename = 'STIPA_Signal_25s.wav';
[refSig, refFs] = audioread(refFilename);

positions       = [1, 2];     
nMeasurements   = 6;          % number of STIPA_MES files per position

% Preallocate result arrays
nFiles          = numel(positions) * nMeasurements;
stiNoRefVal     = zeros(nFiles,1);
stiWithRefVal   = zeros(nFiles,1);
fileList        = cell(nFiles,1);

% Loop over each position and measurement index
idx = 1;
for p = positions
    for k = 1:nMeasurements
        % Build filename and store it
        fname = sprintf('STIPA_MES%d_P%d.wav', k, p);
        fileList{idx} = fname;
        
        % Read the measurement signal
        [sig, fs] = audioread(fname);
        
        % STIPA without external reference
        stiNoRefVal(idx)   = stipa(sig, fs, ...
                                  'doTable', 0, ...
                                  'doPlot',  0, ...
                                  'SignalStart', 0);
        
        % STIPA with external reference
        stiWithRefVal(idx) = stipa(sig, fs, ...
                                  refSig, refFs, ...
                                  'doTable', 0, ...
                                  'doPlot',  0, ...
                                  'SignalStart', 0);
        
        idx = idx + 1;
    end
end

% Build a MATLAB table summarizing all results
T_STIPA = table( ...
    fileList, ...
    stiNoRefVal, ...
    stiWithRefVal, ...
    'VariableNames', {'File','STI_without_ref','STI_with_ref'} ...
);

% Display the table in the Command Window
disp(T_STIPA);

%% Indirect Method STI Batch Processing (Positions 1 & 2)
% Uses ESS signals and their inverse to compute impulse responses

% Define positions and measurement conditions
positions      = [1, 2];
conditions     = {'2s_20Hz-20kHz', '5s_20Hz-20kHz', '2s_20Hz-10kHz', '5s_20Hz-10kHz'};
nMeasurements  = 3;

% Preallocate result arrays
nFiles             = numel(positions) * numel(conditions) * nMeasurements;
stiIndirectVal     = zeros(nFiles,1);
fileList           = cell(nFiles,1);

idx = 1;
for p = positions
    for c = 1:numel(conditions)
        cond = conditions{c};
        % Load the inverse signal for this condition
        invFilename = sprintf('IR_ESS_%s_inverse.wav', cond);
        [invSig, invFs] = audioread(invFilename);
        for m = 1:nMeasurements
            % Build measurement filename and read it
            measFilename         = sprintf('IR_ESS_%s_P%d_MES%d.wav', cond, p, m);
            fileList{idx}        = measFilename;
            [measSig, fs]        = audioread(measFilename);

            % Compute impulse response via convolution with inverse
            ir                   = convolution(measSig, invSig, fs);

            % Compute STI using the indirect method
            stiIndirectVal(idx)  = STI_IR(ir, fs, 'doTable', 0, 'doPlot', 0);
            idx = idx + 1;
        end
    end
end

% Build and display the results table
T_indirect = table( ...
    fileList, ...
    stiIndirectVal, ...
    'VariableNames', {'File','STI_indirect_method'} ...
);

disp(T_indirect);

%% REW STI Batch Processing (Positions 1 & 2)
% Computes STI_IR directly from measured impulse responses

% REW (Room EQ Wizard) measurements: compute STI_IR for each position
positions = [1, 2];
nPos      = numel(positions);

% Preallocate
stiREWVal = zeros(nPos,1);
fileList  = cell(nPos,1);

% Loop over each REW position
for i = 1:nPos
    p     = positions(i);
    fname = sprintf('IR_REW_position_%d.wav', p);
    fileList{i} = fname;
    
    % Read the impulse response measurement
    [sig, fs] = audioread(fname);
    
    % Compute STI using the ROOM-EQ WIZARD IR
    stiREWVal(i) = STI_IR(sig, fs, 'doTable', 0, 'doPlot', 0);
end

% Build and display results as a MATLAB table
T_REW = table( ...
    fileList, ...
    stiREWVal, ...
    'VariableNames', {'File','STI_IR_REW'} ...
);
disp(T_REW);